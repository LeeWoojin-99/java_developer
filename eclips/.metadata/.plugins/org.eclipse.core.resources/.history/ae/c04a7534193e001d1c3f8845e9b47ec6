package Day0927;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Collection01 {
	public static void main(String[] args) {
		
		ArrayList<Integer> arrList = new ArrayList<Integer>();
//		List arrList = new ArrayList(); // 자료형을 써주지 않으면 모든 객체를 저장할 수 있다.
//		List arrList = new ArrayList<Integer>(); // Integer형만 담을 수 있는 것으로 생성
		
		for(int i=0; i<10; i++) {
			arrList.add(i+1);
//			System.out.println(arrList);
		}
		
		System.out.println(arrList.size()); // 배열의 크기
		
		arrList.remove(0); // int형 값을 매개변수로
		Integer integer = 10;
		arrList.remove(integer); // 객체를 매개변수로
		System.out.println(arrList);

		arrList.set(0, 1); // 0번지의 값을 1로 바꾸기
		System.out.println(arrList);
		
		System.out.println(arrList.get(0)); // 0번지의 값을 반환받기
		
		for(int i=0; i<arrList.size(); i++) {
			System.out.print(arrList.get(i)+"  ");
		}
		System.out.println();
		for(int i: arrList) { // 향상된 for문 가능
			System.out.print(i+"  ");
		}
		System.out.println();
		
		// Iterator를 이용한 list값 출력
		// 번지가 아닌 값을 이용해서 출력
		// list는 순서를 보장하기 때문에 get을 이용하여 원하는 번지에 값을 확인할 수 있었다.
		// set은 순서를 보장하지 않기 때문에 for문으로 접근할 수 없다.
		// set은 Iterator만 이용할 수 없다.
		
		Iterator<Integer> it = arrList.iterator();
		while(it.hasNext()) {
			// hasNext() : 다음 값이 존재한다면 true
			Integer temp = it.next(); // 다음 값을 가져온다.
			System.out.print(temp+" ");
		}
		System.out.println();
		
		// indexOf
		// indexOf(값) : 값의 위치를 반환
		System.out.println(arrList.indexOf(3));
		
		// 객체 : comparator 인터페이스를 구현한 객체를 넣야 한다.
		// 비교(compare) method를 가진 객체를 이용하여 정렬
		
		
		
	}
}
